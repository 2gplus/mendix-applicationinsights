// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package twogapplicationinsights.actions;

import com.mendix.core.Core;
import com.mendix.logging.LogLevel;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import twogapplicationinsights.ApplicationInsightsLogger;
import twogapplicationinsights.proxies.SeverityLevel;

public class SetLoggerLevel extends CustomJavaAction<java.lang.Void>
{
	private java.lang.String InstrumentationKey;
	private IMendixObject __LoggerLevel;
	private twogapplicationinsights.proxies.LoggerLevel LoggerLevel;

	public SetLoggerLevel(IContext context, java.lang.String InstrumentationKey, IMendixObject LoggerLevel)
	{
		super(context);
		this.InstrumentationKey = InstrumentationKey;
		this.__LoggerLevel = LoggerLevel;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		this.LoggerLevel = __LoggerLevel == null ? null : twogapplicationinsights.proxies.LoggerLevel.initialize(getContext(), __LoggerLevel);

		// BEGIN USER CODE
		if (InstrumentationKey == null || InstrumentationKey.length() == 0)
		{
			throw new Exception("Instrumentation key missing");
		}
		ApplicationInsightsLogger logger = ApplicationInsightsLogger.getInstance(InstrumentationKey);

		logger.subscribe(Core.getLogger(LoggerLevel.getLogNode()), convert(LoggerLevel.getLogLevel()));

		return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "SetLoggerLevel";
	}

	// BEGIN EXTRA CODE

	private LogLevel convert(SeverityLevel sl)
	{
		var retVal = LogLevel.TRACE;

		if (sl == SeverityLevel.Critical)
		{
			retVal = LogLevel.CRITICAL;
		}
		else if (sl == SeverityLevel.Warning)
		{
			retVal = LogLevel.WARNING;
		}
		else if (sl == SeverityLevel.Information)
		{
			retVal = LogLevel.INFO;
		}
		else if (sl == SeverityLevel.None)
		{
			retVal = LogLevel.NONE;
		}

		return retVal;
	}
	// END EXTRA CODE
}
