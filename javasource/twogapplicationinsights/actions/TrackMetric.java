// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package twogapplicationinsights.actions;

import java.math.BigDecimal;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.microsoft.applicationinsights.telemetry.MetricTelemetry;
import twogapplicationinsights.ApplicationInsightsLogger;
import twogapplicationinsights.helpers.DataHelper;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class TrackMetric extends CustomJavaAction<java.lang.Boolean>
{
	private java.lang.String InstrumentationKey;
	private IMendixObject __Metric;
	private twogapplicationinsights.proxies.MetricTelemetry Metric;

	public TrackMetric(IContext context, java.lang.String InstrumentationKey, IMendixObject Metric)
	{
		super(context);
		this.InstrumentationKey = InstrumentationKey;
		this.__Metric = Metric;
	}

	@Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.Metric = __Metric == null ? null : twogapplicationinsights.proxies.MetricTelemetry.initialize(getContext(), __Metric);

		// BEGIN USER CODE
		
		//Convert the Mendix Metric object to the AppInsights Metric object
		MetricTelemetry mt = new MetricTelemetry();
		
		mt.setName(Metric.getName());
		mt.setTimestamp(Metric.getTimestamp());
		
		if (Metric.getMin() != null && (new BigDecimal(0)).compareTo(Metric.getMin()) > 0)
		{
			mt.setMin(Metric.getMin().doubleValue());
		}
		
		if (Metric.getMax() != null && (new BigDecimal(0)).compareTo(Metric.getMax()) > 0)
		{
			mt.setMax(Metric.getMax().doubleValue());
		}
		
		if (Metric.getCount() != null)
		{
			mt.setCount(Metric.getCount());
		}
		
		if (Metric.getStandardDeviation() != null)
		{
			mt.setStandardDeviation(Metric.getStandardDeviation().doubleValue());
		}
		
		DataHelper.addToTelemetry(mt, Metric.getCustomProperties());
		
		//Step 2: send the metric to AppInsights loggers
		if (InstrumentationKey == null || InstrumentationKey.length() == 0)
		{
			ApplicationInsightsLogger.sendMetricToAll(mt);
		}
		else
		{
			ApplicationInsightsLogger logger = ApplicationInsightsLogger.getInstance(InstrumentationKey);
			logger.sendMetric(mt);
		}
		
		return Boolean.TRUE;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "TrackMetric";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
